<script>
  
// Simple script to right-align current user's messages
(() => {
  // Function to identify and style user's own messages
  function processMessages() {
    // Get all unprocessed messages
    const messages = document.querySelectorAll('.message:not([data-aligned])');
    
    messages.forEach(message => {
      // Mark as processed to avoid duplicate processing
      message.setAttribute('data-aligned', 'true');
      
      // Check if this is current user's message (follow button hidden)
      const followBtn = message.querySelector('.follow-btn');
      if (followBtn && followBtn.style.display === 'none') {
        // Remember this message is from current user
        const messageId = message.getAttribute('data-message-id');
        if (messageId) {
          localStorage.setItem(`user-msg-${messageId}`, 'true');
        }
        
        // Add outgoing class for right alignment
        message.classList.add('outgoing');
      } else {
        // Check localStorage if this was previously identified as user's message
        const messageId = message.getAttribute('data-message-id');
        if (messageId && localStorage.getItem(`user-msg-${messageId}`) === 'true') {
          message.classList.add('outgoing');
        } else {
          message.classList.add('incoming');
        }
      }
    });
  }
  
  // Set up observer to watch for new messages
  function setupObserver() {
    const observer = new MutationObserver(mutations => {
      let shouldProcess = false;
      
      mutations.forEach(mutation => {
        if (mutation.addedNodes.length) {
          shouldProcess = true;
        }
      });
      
      if (shouldProcess) {
        processMessages();
      }
    });
    
    const chatContainer = document.getElementById('chatContainer');
    if (chatContainer) {
      observer.observe(chatContainer, { childList: true, subtree: true });
      processMessages(); // Process existing messages
    }
  }
  
  // Run when document is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupObserver);
  } else {
    setupObserver();
  }
  
  // Also process messages when loading indicator disappears
  const loadingIndicator = document.getElementById('loadingIndicator');
  if (loadingIndicator) {
    const observer = new MutationObserver(() => {
      if (loadingIndicator.style.display === 'none') {
        processMessages();
      }
    });
    observer.observe(loadingIndicator, { attributes: true, attributeFilter: ['style'] });
  }
})();

</script>