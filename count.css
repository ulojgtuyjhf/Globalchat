
<script>
  (function() {
    // Function to apply color to message bubbles and all blue elements
    function applyColorToChat(selectedColor) {
      // Create or update our style element
      let styleElement = document.getElementById('custom-chat-colors');
      if (!styleElement) {
        styleElement = document.createElement('style');
        styleElement.id = 'custom-chat-colors';
        document.head.appendChild(styleElement);
      }
      
      // Helper function to make a color darker
      function darkenColor(hex, percent) {
        // Convert hex to RGB
        let r = parseInt(hex.slice(1, 3), 16);
        let g = parseInt(hex.slice(3, 5), 16);
        let b = parseInt(hex.slice(5, 7), 16);
        
        // Darken
        r = Math.floor(r * (1 - percent / 100));
        g = Math.floor(g * (1 - percent / 100));
        b = Math.floor(b * (1 - percent / 100));
        
        // Convert back to hex
        return "#" +
          ((1 << 24) + (r << 16) + (g << 8) + b)
          .toString(16).slice(1);
      }
      
      // Create a lighter version for hover states
      const lighterColor = selectedColor + "33"; // 20% opacity
      const darkerColor = darkenColor(selectedColor, 15);
      
      // Apply color to ALL blue elements
      styleElement.textContent = `
            /* Message bubbles */
            .message-content {
                background-color: ${selectedColor} !important;
                border-color: ${selectedColor}33 !important;
            }
            .message-content::before {
                background-color: ${selectedColor} !important;
            }
            
            /* UI elements */
            .chat-container::-webkit-scrollbar-thumb {
                background: ${selectedColor} !important;
            }
            .chat-container::-webkit-scrollbar-thumb:hover {
                background: ${darkerColor} !important;
            }
            .send-button, .reply-send {
                background-color: ${selectedColor} !important;
            }
            .send-button:hover, .reply-send:hover {
                background-color: ${darkerColor} !important;
            }
            .send-button:disabled {
                background-color: ${selectedColor}77 !important;
            }
            
            /* Text colors */
            .user-name, .media-button, .follow-btn {
                color: ${selectedColor} !important;
            }
            
            /* Hover states */
            .action-button:hover {
                color: ${selectedColor} !important;
                background-color: ${lighterColor} !important;
            }
            .follow-btn:hover {
                background-color: ${lighterColor} !important;
            }
            .follow-btn.followed {
                background-color: ${selectedColor} !important;
            }
            
            /* Borders on hover */
            .profile-image:hover {
                border-color: ${selectedColor} !important;
            }
            
            /* Loading animation */
            .loading-dot {
                background-color: ${selectedColor} !important;
            }
            
            /* Input hover states */
            .input-wrapper:focus-within {
                box-shadow: 0 0 0 2px ${selectedColor}33 !important;
            }
            .media-button:hover {
                background-color: ${lighterColor} !important;
            }
        `;
    }
    
    // Function to initialize the chat colors
    function initChatColors() {
      // Get currently saved color or use default Twitter blue
      const savedColor = localStorage.getItem('color-value') || '#1da1f2';
      
      // Apply the color right away
      applyColorToChat(savedColor);
      
      // Listen for changes to the color in localStorage
      window.addEventListener('storage', function(event) {
        if (event.key === 'color-value') {
          const newColor = event.newValue || '#1da1f2';
          applyColorToChat(newColor);
        }
      });
      
      // Also listen for theme changes
      window.addEventListener('storage', function(event) {
        if (event.key === 'twitter-theme') {
          // When theme changes, reapply the color to ensure it works with the new theme
          const savedColor = localStorage.getItem('color-value') || '#1da1f2';
          applyColorToChat(savedColor);
        }
      });
      
      // Also listen for new messages in the chat
      const chatContainer = document.querySelector('.chat-container');
      if (chatContainer) {
        // Use MutationObserver to watch for DOM changes
        const observer = new MutationObserver(function() {
          // Reapply colors when new messages appear
          const savedColor = localStorage.getItem('color-value') || '#1da1f2';
          applyColorToChat(savedColor);
        });
        
        // Start observing
        observer.observe(chatContainer, { childList: true, subtree: true });
      }
    }
    
    // Run when the DOM is fully loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initChatColors);
    } else {
      initChatColors();
    }
  })();
</script>